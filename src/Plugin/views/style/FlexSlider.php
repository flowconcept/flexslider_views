<?php

/**
 * @file
 * Definition of Drupal\flexslider\Plugin\views\style\FlexSlider.
 */

namespace Drupal\flexslider_views\Plugin\views\style;

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Plugin\views\style\StylePluginBase;

/**
 * Style plugin to render each item as a flexslider slide.
 *
 * @ingroup views_style_plugins
 *
 * @ViewsStyle(
 *   id = "flexslider",
 *   title = @Translation("Flexslider"),
 *   help = @Translation("Displays rows as flexslider slides."),
 *   theme = "views_view_flexslider",
 *   display_types = {"normal"}
 * )
 */
class FlexSlider extends StylePluginBase {

  /**
   * Does the style plugin allows to use style plugins.
   *
   * @var bool
   */
  protected $usesRowPlugin = TRUE;

  /**
   * Does the style plugin support custom css class for the rows.
   *
   * @var bool
   */
  protected $usesRowClass = TRUE;

  /**
   * Set default options
   */
  protected function defineOptions() {
    $options = parent::defineOptions();

    $options['type'] = array('default' => 'ul');
    $options['wrapper_class']['default'] = 'flexslider';
    $options['class']['default'] = 'flexslide';

    $options['flex_slider_clearfix'] = TRUE;
    $options['flex_slider_advanced'] = FALSE;
    $options['flex_slider_animated_nav'] = FALSE;
    $options['flex_slider_sortWeight'] = 0;

    $options['flexslide_namespace']['default'] = 'flex-'; //String: Prefix string attached to the class of every element generated by the plugin
    $options['flexslide_selector']['default'] = 'ul.flexslides > li'; //Selector: Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril
    $options['flexslide_animation']['default'] = 'slide'; //String: Select your animation type, "fade" or "slide"
    $options['flexslide_easing']['default'] = 'swing'; //String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!
    $options['flexslide_direction']['default'] = 'horizontal'; //String: Select the sliding direction, "horizontal" or "vertical"
    $options['flexslide_reverse']['default'] = FALSE; //Boolean: Reverse the animation direction
    $options['flexslide_animationLoop']['default'] = TRUE; //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
    $options['flexslide_smoothHeight']['default'] = FALSE; //Boolean: Allow height of the slider to animate smoothly in horizontal mode
    $options['flexslide_startAt']['default'] = 0; //Integer: The slide that the slider should start on. Array notation (0 = first slide)
    $options['flexslide_slideshow']['default'] = TRUE; //Boolean: Animate slider automatically
    $options['flexslide_slideshowSpeed']['default'] = '7000'; //Integer: Set the speed of the slideshow cycling, in milliseconds
    $options['flexslide_animationSpeed']['default'] = '600'; //Integer: Set the speed of animations, in milliseconds
    $options['flexslide_initDelay']['default'] = 0; //Integer: Set an initialization delay, in milliseconds
    $options['flexslide_randomize']['default'] = FALSE; //Boolean: Randomize slide order

    // Usability features
    $options['flexslide_pauseOnAction']['default'] = FALSE; //Boolean: Pause the slideshow when interacting with control elements, highly recommended.
    $options['flexslide_pauseOnHover']['default'] = TRUE; //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering
    $options['flexslide_useCSS']['default'] = TRUE; //Boolean: Slider will use CSS3 transitions if available
    $options['flexslide_touch']['default'] = TRUE; //Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
    $options['flexslide_video']['default'] = FALSE; //Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches

    $options['flex_slider_lazy_load']['default'] = FALSE;

    // Primary Controls
    $options['flexslide_controlNav']['default'] = TRUE; //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
    $options['flexslide_directionNav']['default'] = TRUE; //Boolean: Create navigation for previous/next navigation? (true/false)
    $options['flexslide_prevText']['default'] = 'Previous'; //String: Set the text for the "previous" directionNav item
    $options['flexslide_nextText']['default'] = 'Next'; //String: Set the text for the "next" directionNav item

    // Secondary Navigation
    $options['flexslide_keyboard']['default'] = FALSE; //Boolean: Allow slider navigating via keyboard left/right keys
    $options['flexslide_multipleKeyboard']['default'] = FALSE; //Boolean: Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.
    $options['flexslide_mousewheel']['default'] = FALSE; //{UPDATED} Boolean: Requires jquery.mousewheel.js (https://github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel
    $options['flexslide_pausePlay']['default'] = FALSE; //Boolean: Create pause/play dynamic element
    $options['flexslide_pauseText']['default'] = 'Pause'; //String: Set the text for the "pause" pausePlay item
    $options['flexslide_playText']['default'] = 'Play'; //String: Set the text for the "play" pausePlay item

    // Special properties
    $options['flexslide_controlsContainer']['default'] = ""; //{UPDATED} Selector: USE CLASS SELECTOR. Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be ".flexslider-container". Property is ignored if given element is not found.
    $options['flexslide_manualControls']['default'] = ""; //Selector: Declare custom control navigation. Examples would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
    $options['flexslide_sync']['default'] = ""; //Selector: Mirror the actions performed on this slider with another slider. Use with care.
    $options['flexslide_asNavFor']['default'] = ""; //Selector: Internal property exposed for turning the slider into a thumbnail navigation for another slider

    // Carousel Options
    $options['flexslide_itemWidth']['default'] = ""; //Integer: Box-model width of individual carousel items, including horizontal borders and padding.
    $options['flexslide_itemMargin']['default'] = ""; //Integer: Margin between carousel items.
    $options['flexslide_minItems']['default'] = 1; //Integer: Minimum number of carousel items that should be visible. Items will resize fluidly when below this.
    $options['flexslide_maxItems']['default'] = 1; //Integer: Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.
    $options['flexslide_move']['default'] = 1; //Integer: Number of carousel items that should move on animation. If 0, slider will move all visible items.

    return $options;
  }

  /**
   * Render the given style.
   */
  public function buildOptionsForm(&$form, FormStateInterface $form_state) {
    parent::buildOptionsForm($form, $form_state);
    $form['type']['#type'] = 'value';
    $form['type']['#value'] = 'ul';

    $form['flexslide_namespace'] = array(
      '#access' => FALSE,
      '#type' => 'textfield',
      '#title' => t('namespace'),
      '#default_value' => $this->options['flexslide_namespace'],
      '#description' => t('String: Prefix string attached to the class of every element generated by the plugin'),
    );
    $form['flexslide_selector'] = array(
      '#access' => FALSE,
      '#type' => 'textfield',
      '#title' => t('selector'),
      '#default_value' => $this->options['flexslide_selector'],
      '#description' => t('Selector: Must match a simple pattern. {container} > {slide} -- Ignore pattern at your own peril'),
    );
    $form['flex_slider_lazy_load'] = array(
      '#type' => 'checkbox',
      '#title' => t('lazyloading'),
      '#default_value' => $this->options['flex_slider_lazy_load'],
      '#description' => t('Boolean: Enable lazyloading'),
    );
    $form['flex_slider_animated_nav'] = array(
      '#type' => 'checkbox',
      '#title' => t('CSS3 Navigation'),
      '#default_value' => $this->options['flex_slider_animated_nav'],
      '#description' => t('Boolean: Use the default flexslider css3 navigation animations'),
    );
    $form['flexslide_animation'] = array(
      '#type' => 'select',
      '#options' => array(
        'fade' => t('fade'),
        'slide' => t('slide'),
      ),
      '#title' => t('animation'),
      '#default_value' => $this->options['flexslide_animation'],
      '#description' => t('String: Select your animation type, "fade" or "slide" '),
    );
    $form['flexslide_easing'] = array(
      '#type' => 'select',
      '#options' => array(
        'linear' => t('linear'),
        'swing' => t('swing'),
        'easeInQuad' => t('easeInQuad'),
        'easeOutQuad' => t('easeOutQuad'),
        'easeInOutQuad' => t('easeInOutQuad'),
        'easeInCubic' => t('easeInCubic'),
        'easeOutCubic' => t('easeOutCubic'),
        'easeInOutCubic' => t('easeInOutCubic'),
        'easeInQuart' => t('easeInQuart'),
        'easeOutQuart' => t('easeOutQuart'),
        'easeInOutQuart' => t('easeInOutQuart'),
        'easeInQuint' => t('easeInQuint'),
        'easeOutQuint' => t('easeOutQuint'),
        'easeInOutQuint' => t('easeInOutQuint'),
        'easeInSine' => t('easeInSine'),
        'easeOutSine' => t('easeOutSine'),
        'easeInOutSine' => t('easeInOutSine'),
        'easeInExpo' => t('easeInExpo'),
        'easeOutExpo' => t('easeOutExpo'),
        'easeInOutExpo' => t('easeInOutExpo'),
        'easeInCirc' => t('easeInCirc'),
        'easeOutCirc' => t('easeOutCirc'),
        'easeInOutCirc' => t('easeInOutCirc'),
        'easeInElastic' => t('easeInElastic'),
        'easeOutElastic' => t('easeOutElastic'),
        'easeInOutElastic' => t('easeInOutElastic'),
        'easeInBack' => t('easeInBack'),
        'easeOutBack' => t('easeOutBack'),
        'easeInOutBack' => t('easeInOutBack'),
        'easeInBounce' => t('easeInBounce'),
        'easeOutBounce' => t('easeOutBounce'),
        'easeInOutBounce' => t('easeInOutBounce')
      ),
      '#title' => t('easing'),
      '#default_value' => $this->options['flexslide_easing'],
      '#description' => t('String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported! http://jqueryui.com/demos/effect/easing.html'),
    );
    $form['flexslide_direction'] = array(
      '#type' => 'select',
      '#options' => array(
        'horizontal' => t('horizontal'),
        'vertical' => t('vertical'),
      ),
      '#title' => t('direction'),
      '#default_value' => $this->options['flexslide_direction'],
      '#description' => t('String: Select the sliding direction, "horizontal" or "vertical" '),
    );
    $form['flexslide_reverse'] = array(
      '#type' => 'checkbox',
      '#title' => t('reverse'),
      '#default_value' => $this->options['flexslide_reverse'],
      '#description' => t('Boolean: Reverse the animation direction'),
    );
    $form['flexslide_animationLoop'] = array(
      '#type' => 'checkbox',
      '#title' => t('animationLoop'),
      '#default_value' => $this->options['flexslide_animationLoop'],
      '#description' => t('Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end'),
    );
    $form['flexslide_smoothHeight'] = array(
      '#type' => 'checkbox',
      '#title' => t('smoothHeight'),
      '#default_value' => $this->options['flexslide_smoothHeight'],
      '#description' => t('Boolean: Allow height of the slider to animate smoothly in horizontal mode'),
    );
    $form['flexslide_startAt'] = array(
      '#type' => 'textfield',
      '#title' => t('startAt'),
      '#default_value' => $this->options['flexslide_startAt'],
      '#description' => t('Integer: The slide that the slider should start on. Array notation (0 = first slide)'),
    );
    $form['flexslide_slideshow'] = array(
      '#type' => 'checkbox',
      '#title' => t('slideshow'),
      '#default_value' => $this->options['flexslide_slideshow'],
      '#description' => t('Boolean: Animate slider automatically'),
    );
    $form['flexslide_slideshowSpeed'] = array(
      '#type' => 'textfield',
      '#title' => t('slideshowSpeed'),
      '#default_value' => $this->options['flexslide_slideshowSpeed'],
      '#description' => t('Integer: Set the speed of the slideshow cycling, in milliseconds'),
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_slideshow]"]' => array('checked' => TRUE)),
      ),
    );
    $form['flexslide_animationSpeed'] = array(
      '#type' => 'textfield',
      '#title' => t('animationSpeed'),
      '#default_value' => $this->options['flexslide_animationSpeed'],
      '#description' => t('Integer: Set the speed of animations, in milliseconds'),
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_slideshow]"]' => array('checked' => TRUE)),
      ),
    );
    $form['flexslide_initDelay'] = array(
      '#type' => 'textfield',
      '#title' => t('initDelay'),
      '#default_value' => $this->options['flexslide_initDelay'],
      '#description' => t('Integer: Set an initialization delay, in milliseconds'),
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_slideshow]"]' => array('checked' => TRUE)),
      ),
    );
    $form['flexslide_randomize'] = array(
      '#type' => 'checkbox',
      '#title' => t('randomize'),
      '#default_value' => $this->options['flexslide_randomize'],
      '#description' => t('Boolean: Randomize slide order'),
    );

    // Usability features
    $form['flexslide_pauseOnAction'] = array(
      '#type' => 'checkbox',
      '#title' => t('pauseOnAction'),
      '#default_value' => $this->options['flexslide_pauseOnAction'],
      '#description' => t('Boolean: Pause the slideshow when interacting with control elements, highly recommended.'),
    );
    $form['flexslide_pauseOnHover'] = array(
      '#type' => 'checkbox',
      '#title' => t('pauseOnHover'),
      '#default_value' => $this->options['flexslide_pauseOnHover'],
      '#description' => t('Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering'),
    );
    $form['flexslide_useCSS'] = array(
      '#type' => 'checkbox',
      '#title' => t('useCSS'),
      '#default_value' => $this->options['flexslide_useCSS'],
      '#description' => t('Boolean: Slider will use CSS3 transitions if available'),
    );
    $form['flexslide_touch'] = array(
      '#type' => 'checkbox',
      '#title' => t('touch'),
      '#default_value' => $this->options['flexslide_touch'],
      '#description' => t('Boolean: Allow touch swipe navigation of the slider on touch-enabled devices'),
    );
    $form['flexslide_video'] = array(
      '#type' => 'checkbox',
      '#title' => t('video'),
      '#default_value' => $this->options['flexslide_video'],
      '#description' => t('Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches'),
    );

    // Primary Controls
    $form['flexslide_controlNav'] = array(
      '#type' => 'checkbox',
      '#title' => t('controlNav'),
      '#default_value' => $this->options['flexslide_controlNav'],
      '#description' => t('Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage'),
    );
    $form['flexslide_directionNav'] = array(
      '#type' => 'checkbox',
      '#title' => t('directionNav'),
      '#default_value' => $this->options['flexslide_directionNav'],
      '#description' => t('Boolean: Create navigation for previous/next navigation? (true/false)'),
    );
    $form['flexslide_prevText'] = array(
      '#type' => 'textfield',
      '#title' => t('prevText'),
      '#default_value' => $this->options['flexslide_prevText'],
      '#description' => t('String: Set the text for the "previous" directionNav item'),
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_directionNav]"]' => array('checked' => TRUE)),
      )
    );
    $form['flexslide_nextText'] = array(
      '#type' => 'textfield',
      '#title' => t('nextText'),
      '#default_value' => $this->options['flexslide_nextText'],
      '#description' => t('String: Set the text for the "next" directionNav item'),
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_directionNav]"]' => array('checked' => TRUE)),
      )
    );

    // Secondary Navigation
    $form['flexslide_keyboard'] = array(
      '#type' => 'checkbox',
      '#title' => t('keyboard'),
      '#default_value' => $this->options['flexslide_keyboard'],
      '#description' => t('Boolean: Allow slider navigating via keyboard left/right keys'),
    );
    $form['flexslide_multipleKeyboard'] = array(
      '#access' => FALSE,
      '#type' => 'checkbox',
      '#title' => t('multipleKeyboard'),
      '#default_value' => $this->options['flexslide_multipleKeyboard'],
      '#description' => t('Boolean: Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.'),
    );
    $form['flexslide_mousewheel'] = array(
      '#access' => FALSE,
      '#type' => 'checkbox',
      '#title' => t('mousewheel'),
      '#default_value' => $this->options['flexslide_mousewheel'],
      '#description' => t('Boolean: Requires jquery.mousewheel.js (https://github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel'),
    );
    $form['flexslide_pausePlay'] = array(
      '#type' => 'checkbox',
      '#title' => t('pausePlay'),
      '#default_value' => $this->options['flexslide_pausePlay'],
      '#description' => t('Boolean: Create pause/play dynamic element'),
    );
    $form['flexslide_pauseText'] = array(
      '#type' => 'textfield',
      '#title' => t('pauseText'),
      '#default_value' => $this->options['flexslide_pauseText'],
      '#description' => t('String: Set the text for the "pause" pausePlay item'),
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_pausePlay]"]' => array('checked' => TRUE)),
      )
    );
    $form['flexslide_playText'] = array(
      '#type' => 'textfield',
      '#title' => t('playText'),
      '#default_value' => $this->options['flexslide_playText'],
      '#description' => t('String: Set the text for the "play" pausePlay item'),
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_pausePlay]"]' => array('checked' => TRUE)),
      )
    );

    // Carousel Options
    $form['flexslide_itemWidth'] = array(
      '#type' => 'textfield',
      '#title' => t('itemWidth'),
      '#default_value' => $this->options['flexslide_itemWidth'],
      '#description' => t('Integer: Box-model width of individual carousel items, including horizontal borders and padding.'),
    );
    $form['flexslide_itemMargin'] = array(
      '#type' => 'textfield',
      '#title' => t('itemMargin'),
      '#default_value' => $this->options['flexslide_itemMargin'],
      '#description' => t('Integer: Margin between carousel items.'),
    );
    $form['flexslide_minItems'] = array(
      '#type' => 'textfield',
      '#title' => t('minItems'),
      '#default_value' => $this->options['flexslide_minItems'],
      '#description' => t('Integer: Minimum number of carousel items that should be visible. Items will resize fluidly when below this.'),
    );
    $form['flexslide_maxItems'] = array(
      '#type' => 'textfield',
      '#title' => t('maxItems'),
      '#default_value' => $this->options['flexslide_maxItems'],
      '#description' => t('Integer: Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.'),
    );
    $form['flexslide_move'] = array(
      '#type' => 'textfield',
      '#title' => t('move'),
      '#default_value' => $this->options['flexslide_move'],
      '#description' => t('Integer: Number of carousel items that should move on animation. If 0, slider will move all visible items.'),
    );

    $form['flex_slider_clearfix'] = array(
      '#type' => 'checkbox',
      '#title' => t('Clearfix'),
      '#default_value' => $this->options['flex_slider_clearfix'],
      '#description' => t('Boolean: Add the drupal clearfix class'),
    );

    $form['flex_slider_advanced'] = array(
      '#type' => 'checkbox',
      '#title' => t('Special properties'),
      '#default_value' => $this->options['flex_slider_advanced'],
      '#description' => t('Boolean: Show dangerous settings (Use with care)'),
    );
    // Special properties
    $form['flexslide_controlsContainer'] = array(
      '#states' => array(
        'visible' => array('input[name="style_options[flex_slider_advanced]"]' => array('checked' => TRUE)),
      ),
      '#type' => 'textfield',
      '#title' => t('controlsContainer'),
      '#default_value' => $this->options['flexslide_controlsContainer'],
      '#description' => t('Selector: USE CLASS SELECTOR. Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be ".flexslider-container". Property is ignored if given element is not found.'),
    );
    $form['flexslide_manualControls'] = array(
      '#states' => array(
        'visible' => array('input[name="style_options[flex_slider_advanced]"]' => array('checked' => TRUE)),
      ),
      '#type' => 'textfield',
      '#title' => t('manualControls'),
      '#default_value' => $this->options['flexslide_manualControls'],
      '#description' => t('Selector: Declare custom control navigation. Examples would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.'),
    );
    $form['flexslide_sync'] = array(
      '#states' => array(
        'visible' => array('input[name="style_options[flex_slider_advanced]"]' => array('checked' => TRUE)),
      ),
      '#type' => 'textfield',
      '#title' => t('sync'),
      '#default_value' => $this->options['flexslide_sync'],
      '#description' => t('Selector: Mirror the actions performed on this slider with another slider. Use with care. The slider being synced must be initialized first'),
    );
    $form['flexslide_asNavFor'] = array(
      '#states' => array(
        'visible' => array('input[name="style_options[flex_slider_advanced]"]' => array('checked' => TRUE)),
      ),
      '#type' => 'textfield',
      '#title' => t('asNavFor'),
      '#default_value' => $this->options['flexslide_asNavFor'],
      '#description' => t('Selector: Internal property exposed for turning the slider into a thumbnail navigation for another slider'),
    );
    $form['flex_slider_sortWeight'] = array(
      '#states' => array(
        'visible' => array('input[name="style_options[flex_slider_advanced]"]' => array('checked' => TRUE)),
      ),
      '#type' => 'textfield',
      '#title' => t('sortWeight'),
      '#default_value' => $this->options['flex_slider_sortWeight'],
      '#description' => t('Integer: This weight may be used to sort the execution order. This has only use for sync.'),
    );
  }
}
