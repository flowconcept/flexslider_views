<?php

/**
 * @file
 * Definition of Drupal\flexslider\Plugin\views\style\FlexSlider.
 */

namespace Drupal\flexslider_views\Plugin\views\style;

use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\entity_test\FieldStorageDefinition;
use Drupal\views\Plugin\views\style\StylePluginBase;

/**
 * Style plugin to render each item as a flexslider slide.
 *
 * @ingroup views_style_plugins
 *
 * @ViewsStyle(
 *   id = "flexslider",
 *   title = Flexslider,
 *   help = @Translation("Displays rows as Flexslider slides."),
 *   theme = "views_view_flexslider",
 *   display_types = {"normal"}
 * )
 */
class FlexSlider extends StylePluginBase {

  /**
   * Does the style plugin allows to use style plugins.
   *
   * @var bool
   */
  protected $usesRowPlugin = TRUE;

  /**
   * Does the style plugin support custom css class for the rows.
   *
   * @var bool
   */
  protected $usesRowClass = TRUE;

  /**
   * Set default options
   */
  protected function defineOptions() {
    $options = parent::defineOptions();

    $options['type']['default'] = 'ul';
    $options['wrapper_class']['default'] = '';
    $options['class']['default'] = 'flexslides';

    $options['flexslide_namespace']['default'] = 'flex-'; //String: Prefix string attached to the class of every element generated by the plugin
    $options['flexslide_selector']['default'] = 'ul.flexslides > li'; //Selector: Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril
    $options['flexslide_animation']['default'] = 'slide'; //String: Select your animation type, "fade" or "slide"
    $options['flexslide_easing']['default'] = 'swing'; //String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!
    $options['flexslide_direction']['default'] = 'horizontal'; //String: Select the sliding direction, "horizontal" or "vertical"
    $options['flexslide_reverse']['default'] = FALSE; //Boolean: Reverse the animation direction
    $options['flexslide_animationLoop']['default'] = TRUE; //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
    $options['flexslide_smoothHeight']['default'] = FALSE; //Boolean: Allow height of the slider to animate smoothly in horizontal mode
    $options['flexslide_startAt']['default'] = 0; //Integer: The slide that the slider should start on. Array notation (0 = first slide)
    $options['flexslide_slideshow']['default'] = TRUE; //Boolean: Animate slider automatically
    $options['flexslide_slideshowSpeed']['default'] = 7000; //Integer: Set the speed of the slideshow cycling, in milliseconds
    $options['flexslide_animationSpeed']['default'] = 600; //Integer: Set the speed of animations, in milliseconds
    $options['flexslide_initDelay']['default'] = 0; //Integer: Set an initialization delay, in milliseconds
    $options['flexslide_randomize']['default'] = FALSE; //Boolean: Randomize slide order
    $options['flexslide_fadeFirstSlide']['default'] = TRUE; //Boolean: Fade in the first slide when animation type is "fade"
    $options['flexslide_thumbCaptions']['default'] = FALSE; //Boolean: Whether or not to put captions on thumbnails when using the "thumbnails" controlNav
    $options['flexslide_thumbField']['default'] = ''; // Drupal views specific: select field for the "thumbnails" ControlNav.
    $options['flexslide_thumbImageStyle']['default'] = t('None (original image)');

    // Usability features
    $options['flexslide_pauseOnAction']['default'] = TRUE; //Boolean: Pause the slideshow when interacting with control elements, highly recommended.
    $options['flexslide_pauseOnHover']['default'] = FALSE; //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering
    $options['flexslide_pauseInvisible']['default'] = TRUE; //Boolean: Pause the slideshow when tab is invisible, resume when visible. Provides better UX, lower CPU usage
    $options['flexslide_useCSS']['default'] = TRUE; //Boolean: Slider will use CSS3 transitions if available
    $options['flexslide_touch']['default'] = TRUE; //Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
    $options['flexslide_video']['default'] = FALSE; //Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches

    // Primary Controls
    $options['flexslide_controlNav']['default'] = TRUE; //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
    $options['flexslide_directionNav']['default'] = TRUE; //Boolean: Create navigation for previous/next navigation? (true/false)
    $options['flexslide_prevText']['default'] = 'Previous'; //String: Set the text for the "previous" directionNav item
    $options['flexslide_nextText']['default'] = 'Next'; //String: Set the text for the "next" directionNav item

    // Secondary Navigation
    $options['flexslide_keyboard']['default'] = TRUE; //Boolean: Allow slider navigating via keyboard left/right keys
    $options['flexslide_multipleKeyboard']['default'] = FALSE; //Boolean: Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.
    $options['flexslide_mousewheel']['default'] = FALSE; //Boolean: Requires jquery.mousewheel.js (https://github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel
    $options['flexslide_pausePlay']['default'] = FALSE; //Boolean: Create pause/play dynamic element
    $options['flexslide_pauseText']['default'] = 'Pause'; //String: Set the text for the "pause" pausePlay item
    $options['flexslide_playText']['default'] = 'Play'; //String: Set the text for the "play" pausePlay item

    // Special properties
    $options['flexslide_controlsContainer']['default'] = ""; //Selector: USE CLASS SELECTOR. Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be ".flexslider-container". Property is ignored if given element is not found.
    $options['flexslide_manualControls']['default'] = ""; //Selector: Declare custom control navigation. Examples would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
    $options['flexslide_customDirectionNav']['default'] = ""; //jQuery Object/Selector: Custom prev / next button. Must be two jQuery elements. In order to make the events work they have to have the classes "prev" and "next" (plus namespace)
    $options['flexslide_sync']['default'] = ""; //Selector: Mirror the actions performed on this slider with another slider. Use with care.
    $options['flex_slider_sortWeight']['default'] = "";
    $options['flexslide_asNavFor']['default'] = ""; //Selector: Internal property exposed for turning the slider into a thumbnail navigation for another slider

    // Carousel Options
    $options['flexslide_itemWidth']['default'] = ""; //Integer: Box-model width of individual carousel items, including horizontal borders and padding.
    $options['flexslide_itemMargin']['default'] = ""; //Integer: Margin between carousel items.
    $options['flexslide_minItems']['default'] = 1; //Integer: Minimum number of carousel items that should be visible. Items will resize fluidly when below this.
    $options['flexslide_maxItems']['default'] = 0; //Integer: Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.
    $options['flexslide_move']['default'] = 0; //Integer: Number of carousel items that should move on animation. If 0, slider will move all visible items.
    $options['flexslide_allowOneSlide']['default'] = TRUE; //Boolean: Whether or not to allow a slider comprised of a single slide

    return $options;
  }

  /**
   * Return only non-empty, non-default option values.
   *
   * @return array
   */
  public function filterOptions() {
    $options = array();
    $defaults = $this->defineOptions();

    foreach ($this->options as $key => $value) {
      if (strpos($key, 'flexslide_') === 0) {
        $value = $this->getFilteredOptionValue($value, $defaults[$key]['default']);
        if (!is_null($value)) {
          $options[substr($key, 10)] = $value;
        }
      }
    }

    return $options;
  }

  /**
   * Returns an appropriately typed option value, or NULL if it matches the default.
   *
   * @param mixed $value
   * @param mixed $default
   *
   * @return bool|float|int|null|string
   */
  protected function getFilteredOptionValue($value, $default) {
    if (is_bool($default)) {
      if ((bool) $value !== $default) {
        return (bool) $value;
      }
    }
    else if (is_int($default)) {
      if ((int) $value !== $default) {
        return (int) $value;
      }
    }
    else if (is_float($default)) {
      if ((float) $value !== $default) {
        return (float) $value;
      }
    }
    else if ($value !== $default) {
      return /*string*/ $value;
    }
    return NULL;
  }

  /**
   * Render the given style.
   */
  public function buildOptionsForm(&$form, FormStateInterface $form_state) {
    parent::buildOptionsForm($form, $form_state);


    $form['type'] = array(
      '#type' => 'value',
      '#value' => 'ul',
    );

    $form['wrapper_class'] = array(
      '#type' => 'textfield',
      '#title' => t('Wrapper classes'),
      '#default_value' => $this->options['wrapper_class'],
      '#description' => t('Extra classes for the flexslider wrapper.'),
    );

    $form['flexslide_namespace'] = array(
      '#type' => 'textfield',
      '#title' => t('namespace'),
      '#default_value' => $this->options['flexslide_namespace'],
      '#description' => t('Prefix string attached to the class of every element generated by the plugin. Hint: can be an empty string.'),
    );
    $form['flexslide_selector'] = array(
      '#type' => 'textfield',
      '#title' => t('selector'),
      '#default_value' => $this->options['flexslide_selector'],
      '#description' => t('The selector pattern <code>{container} > {slide}</code> is mandatory, allowing the plugin to predictably interpret the selector property. Omitting the <code>&gt;</code> from the selector is not suggested, but is possible if your markup doesn\'t follow the immediate descendant pattern.'),
    );
    $form['flexslide_animation'] = array(
      '#type' => 'select',
      '#options' => array(
        'fade' => t('fade'),
        'slide' => t('slide'),
      ),
      '#title' => t('animation'),
      '#default_value' => $this->options['flexslide_animation'],
      '#description' => t('Select your animation type.'),
    );
    $form['flexslide_easing'] = array(
      '#type' => 'select',
      '#options' => array(
        'linear' => t('linear'),
        'swing' => t('swing'),
        'easeInQuad' => t('easeInQuad'),
        'easeOutQuad' => t('easeOutQuad'),
        'easeInOutQuad' => t('easeInOutQuad'),
        'easeInCubic' => t('easeInCubic'),
        'easeOutCubic' => t('easeOutCubic'),
        'easeInOutCubic' => t('easeInOutCubic'),
        'easeInQuart' => t('easeInQuart'),
        'easeOutQuart' => t('easeOutQuart'),
        'easeInOutQuart' => t('easeInOutQuart'),
        'easeInQuint' => t('easeInQuint'),
        'easeOutQuint' => t('easeOutQuint'),
        'easeInOutQuint' => t('easeInOutQuint'),
        'easeInSine' => t('easeInSine'),
        'easeOutSine' => t('easeOutSine'),
        'easeInOutSine' => t('easeInOutSine'),
        'easeInExpo' => t('easeInExpo'),
        'easeOutExpo' => t('easeOutExpo'),
        'easeInOutExpo' => t('easeInOutExpo'),
        'easeInCirc' => t('easeInCirc'),
        'easeOutCirc' => t('easeOutCirc'),
        'easeInOutCirc' => t('easeInOutCirc'),
        'easeInElastic' => t('easeInElastic'),
        'easeOutElastic' => t('easeOutElastic'),
        'easeInOutElastic' => t('easeInOutElastic'),
        'easeInBack' => t('easeInBack'),
        'easeOutBack' => t('easeOutBack'),
        'easeInOutBack' => t('easeInOutBack'),
        'easeInBounce' => t('easeInBounce'),
        'easeOutBounce' => t('easeOutBounce'),
        'easeInOutBounce' => t('easeInOutBounce')
      ),
      '#title' => t('easing'),
      '#default_value' => $this->options['flexslide_easing'],
      '#description' => t('Default options provided by jQuery are "swing" and "linear," but more can be used by included the <a href="http://gsgd.co.uk/sandbox/jquery/easing/">jQuery Easing plugin</a>. If you chose a non-existent easing method, the slider will break. Note: You need to unset <em>useCSS</em> to force transitions in browsers that support translate3d.'),
    );
    $form['flexslide_direction'] = array(
      '#type' => 'select',
      '#options' => array(
        'horizontal' => t('horizontal'),
        'vertical' => t('vertical'),
      ),
      '#title' => t('direction'),
      '#default_value' => $this->options['flexslide_direction'],
      '#description' => t('Select the sliding direction.'),
    );
    $form['flexslide_reverse'] = array(
      '#type' => 'checkbox',
      '#title' => t('reverse'),
      '#default_value' => $this->options['flexslide_reverse'],
      '#description' => t('Reverse the animation direction.'),
    );
    $form['flexslide_animationLoop'] = array(
      '#type' => 'checkbox',
      '#title' => t('animationLoop'),
      '#default_value' => $this->options['flexslide_animationLoop'],
      '#description' => t('Should the animation loop? If false, directionNav will receive "disable" classes at either end.'),
    );
    $form['flexslide_smoothHeight'] = array(
      '#type' => 'checkbox',
      '#title' => t('smoothHeight'),
      '#default_value' => $this->options['flexslide_smoothHeight'],
      '#description' => t('Allows for smooth height transitions between slides. This property currently works for the fade and horizontal slide animation. The property has no effect on horizontal sliding carousels, however.'),
    );
    $form['flexslide_startAt'] = array(
      '#type' => 'textfield',
      '#title' => t('startAt'),
      '#default_value' => $this->options['flexslide_startAt'],
      '#description' => t('The slide that the slider should start with. 0 is first slide.'),
    );
    $form['flexslide_slideshow'] = array(
      '#type' => 'checkbox',
      '#title' => t('slideshow'),
      '#default_value' => $this->options['flexslide_slideshow'],
      '#description' => t('Animates slider automatically.'),
    );
    $form['flexslide_slideshowSpeed'] = array(
      '#type' => 'textfield',
      '#title' => t('slideshowSpeed'),
      '#default_value' => $this->options['flexslide_slideshowSpeed'],
      '#description' => t('Sets the speed of the slideshow cycling, in milliseconds.'),
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_slideshow]"]' => array('checked' => TRUE)),
      ),
    );
    $form['flexslide_animationSpeed'] = array(
      '#type' => 'textfield',
      '#title' => t('animationSpeed'),
      '#default_value' => $this->options['flexslide_animationSpeed'],
      '#description' => t('Sets the speed of animations, in milliseconds.'),
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_slideshow]"]' => array('checked' => TRUE)),
      ),
    );
    $form['flexslide_initDelay'] = array(
      '#type' => 'textfield',
      '#title' => t('initDelay'),
      '#default_value' => $this->options['flexslide_initDelay'],
      '#description' => t('Delay the initial slideshow of a slider, given in milliseconds. The slider will still initialize, generating controls and displaying the first image, but the slideshow will wait until the initDelay time has completed before starting the slideshow.'),
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_slideshow]"]' => array('checked' => TRUE)),
      ),
    );
    $form['flexslide_randomize'] = array(
      '#type' => 'checkbox',
      '#title' => t('randomize'),
      '#default_value' => $this->options['flexslide_randomize'],
      '#description' => t('Randomize slide order.'),
    );
    $form['flexslide_fadeFirstSlide'] = array(
      '#type' => 'checkbox',
      '#title' => t('fadeFirstSlide'),
      '#default_value' => $this->options['flexslide_fadeFirstSlide'],
      '#description' => t('Fade in the first slide when animation type is "fade".'),
      '#states' => array(
        'visible' => array('select[name="style_options[flexslide_animation]"]' => array('value' => 'fade')),
      )
    );
    $form['flexslide_thumbCaptions'] = array(
      '#type' => 'checkbox',
      '#title' => t('thumbCaptions'),
      '#default_value' => $this->options['flexslide_thumbCaptions'],
      '#description' => t('Whether or not to put captions on thumbnails when using the "thumbnails" controlNav.'),
    );

    $thumbnail_options = array('' => $this->t('- None -'));
    foreach ($this->displayHandler->getHandlers('field') as $id => $handler) {
      if ($label = $handler->label()) {
        $thumbnail_options[$id] = $label;
      }
      else {
        $thumbnail_options[$id] = $handler->adminLabel();
      }
    }

    $form['flexslide_thumbField'] = array(
      '#type' => 'select',
      '#options' => $thumbnail_options,
      '#title' => t('thumbField'),
      '#default_value' => $this->options['flexslide_thumbField'],
      '#description' => t('Select image field for "thumbnails" controlNav output.'),
    );

    $image_styles = image_style_options(FALSE);
    $form['flexslide_thumbImageStyle'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#default_value' => $this->options['flexslide_thumbImageStyle'],
      '#empty_option' => t('None (original image)'),
      '#options' => $image_styles,
    );

    // Usability features
    $form['usability'] = array(
      '#type' => 'details',
      '#title' => t('Usability features'),
      '#weight' => 2,
    );
    $form['flexslide_pauseOnAction'] = array(
      '#type' => 'checkbox',
      '#title' => t('pauseOnAction'),
      '#default_value' => $this->options['flexslide_pauseOnAction'],
      '#description' => t('Pause the slideshow when interacting with control elements, highly recommended.'),
      '#fieldset' => 'usability',
    );
    $form['flexslide_pauseOnHover'] = array(
      '#type' => 'checkbox',
      '#title' => t('pauseOnHover'),
      '#default_value' => $this->options['flexslide_pauseOnHover'],
      '#description' => t('Pause the slideshow when hovering over slider, then resume when no longer hovering.'),
      '#fieldset' => 'usability',
    );
    $form['flexslide_pauseInvisible'] = array(
      '#type' => 'checkbox',
      '#title' => t('pauseInvisible'),
      '#default_value' => $this->options['flexslide_pauseInvisible'],
      '#description' => t('Pause the slideshow when tab is invisible, resume when visible. Provides better UX, lower CPU usage.'),
      '#fieldset' => 'usability',
    );
    $form['flexslide_useCSS'] = array(
      '#type' => 'checkbox',
      '#title' => t('useCSS'),
      '#default_value' => $this->options['flexslide_useCSS'],
      '#description' => t('Allow to override using CSS3 for animation. Translate3d still has numerous bugs that can crop up and wreak havoc, so this is a great property to play with if you are experiencing unexplainable issues in Webkit browsers.<br>Hint: Use conditionals to enable/disable the use of CSS3 on desktops and mobile devices. Mobile devices, in my experience, do not share many of the translate3d bugs seen on desktop browsers.'),
      '#fieldset' => 'usability',
    );
    $form['flexslide_touch'] = array(
      '#type' => 'checkbox',
      '#title' => t('touch'),
      '#default_value' => $this->options['flexslide_touch'],
      '#description' => t('Allows users to exclude touch swipe functionality from their sliders.'),
      '#fieldset' => 'usability',
    );
    $form['flexslide_video'] = array(
      '#type' => 'checkbox',
      '#title' => t('video'),
      '#default_value' => $this->options['flexslide_video'],
      '#description' => t('If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches.'),
      '#fieldset' => 'usability',
    );

    // Primary Controls
    $form['primary'] = array(
      '#type' => 'details',
      '#title' => t('Primary controls'),
      '#weight' => 3,
    );
    $form['flexslide_controlNav'] = array(
      '#type' => 'radios',
      '#title' => t('controlNav'),
      '#default_value' => $this->options['flexslide_controlNav'],
      '#options' => array('1' => 'true', '0' => 'false', 'thumbnails' => 'thumbnails'),
      '#description' => t('Create navigation for paging control of each slide? Note: Leave true for manualControls usage.'),
    );
    $form['flexslide_directionNav'] = array(
      '#type' => 'checkbox',
      '#title' => t('directionNav'),
      '#default_value' => $this->options['flexslide_directionNav'],
      '#description' => t('Create navigation for previous/next navigation?'),
      '#fieldset' => 'primary',
    );
    $form['flexslide_prevText'] = array(
      '#type' => 'textfield',
      '#title' => t('prevText'),
      '#default_value' => $this->options['flexslide_prevText'],
      '#description' => t('Set the text for the "previous" directionNav item.'),
      '#fieldset' => 'primary',
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_directionNav]"]' => array('checked' => TRUE)),
      )
    );
    $form['flexslide_nextText'] = array(
      '#type' => 'textfield',
      '#title' => t('nextText'),
      '#default_value' => $this->options['flexslide_nextText'],
      '#description' => t('Set the text for the "next" directionNav item.'),
      '#fieldset' => 'primary',
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_directionNav]"]' => array('checked' => TRUE)),
      )
    );

    // Secondary Navigation
    $form['secondary'] = array(
      '#type' => 'details',
      '#title' => t('Secondary navigation'),
      '#weight' => 4,
    );
    $form['flexslide_keyboard'] = array(
      '#type' => 'checkbox',
      '#title' => t('keyboard'),
      '#default_value' => $this->options['flexslide_keyboard'],
      '#description' => t('Allow slider navigation via keyboard left/right keys.'),
      '#fieldset' => 'secondary',
    );
    $form['flexslide_multipleKeyboard'] = array(
      '#type' => 'checkbox',
      '#title' => t('multipleKeyboard'),
      '#default_value' => $this->options['flexslide_multipleKeyboard'],
      '#description' => t('Enables keyboard control of more than one slider on the page. This means that all visible sliders will animate, at the same time, via keyboard input.'),
      '#fieldset' => 'secondary',
    );
    $form['flexslide_mousewheel'] = array(
      '#type' => 'checkbox',
      '#title' => t('mousewheel'),
      '#default_value' => $this->options['flexslide_mousewheel'],
      '#description' => t('Allows slider navigating via mouse wheel. Required: jQuery Mousewheel Plugin.'),
      '#fieldset' => 'secondary',
    );
    $form['flexslide_pausePlay'] = array(
      '#type' => 'checkbox',
      '#title' => t('pausePlay'),
      '#default_value' => $this->options['flexslide_pausePlay'],
      '#description' => t('Create pause/play dynamic element.'),
      '#fieldset' => 'secondary',
    );
    $form['flexslide_pauseText'] = array(
      '#type' => 'textfield',
      '#title' => t('pauseText'),
      '#default_value' => $this->options['flexslide_pauseText'],
      '#description' => t('Set the text for the "pause" pausePlay item.'),
      '#fieldset' => 'secondary',
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_pausePlay]"]' => array('checked' => TRUE)),
      )
    );
    $form['flexslide_playText'] = array(
      '#type' => 'textfield',
      '#title' => t('playText'),
      '#default_value' => $this->options['flexslide_playText'],
      '#description' => t('Set the text for the "play" pausePlay item.'),
      '#fieldset' => 'secondary',
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_pausePlay]"]' => array('checked' => TRUE)),
      )
    );

    // Carousel Options
    $form['carousel'] = array(
      '#type' => 'details',
      '#title' => t('Carousel options'),
      '#weight' => 5,
    );
    $form['flexslide_itemWidth'] = array(
      '#type' => 'textfield',
      '#title' => t('itemWidth'),
      '#default_value' => $this->options['flexslide_itemWidth'],
      '#description' => t('Box-model width of individual carousel items, including horizontal borders and padding.'),
      '#fieldset' => 'carousel',
    );
    $form['flexslide_itemMargin'] = array(
      '#type' => 'textfield',
      '#title' => t('itemMargin'),
      '#default_value' => $this->options['flexslide_itemMargin'],
      '#description' => t('Margin between carousel items.'),
      '#fieldset' => 'carousel',
    );
    $form['flexslide_minItems'] = array(
      '#type' => 'textfield',
      '#title' => t('minItems'),
      '#default_value' => $this->options['flexslide_minItems'],
      '#description' => t('Minimum number of carousel items that should be visible. Items will resize fluidly when below this.'),
      '#fieldset' => 'carousel',
    );
    $form['flexslide_maxItems'] = array(
      '#type' => 'textfield',
      '#title' => t('maxItems'),
      '#default_value' => $this->options['flexslide_maxItems'],
      '#description' => t('Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.'),
      '#fieldset' => 'carousel',
    );
    $form['flexslide_move'] = array(
      '#type' => 'textfield',
      '#title' => t('move'),
      '#default_value' => $this->options['flexslide_move'],
      '#description' => t('Number of carousel items that should move on animation. If 0, slider will move all visible items.'),
      '#fieldset' => 'carousel',
    );
    $form['flexslide_allowOneSlide'] = array(
      '#type' => 'checkbox',
      '#title' => t('allowOneSlide'),
      '#default_value' => $this->options['flexslide_allowOneSlide'],
      '#description' => t('Whether or not to allow a slider comprised of a single slide.'),
      '#fieldset' => 'carousel',
    );

    // Special properties
    $form['special'] = array(
      '#type' => 'details',
      '#title' => t('Special properties'),
      '#weight' => 6,
    );
    $form['flexslide_controlsContainer'] = array(
      '#type' => 'textfield',
      '#title' => t('controlsContainer'),
      '#default_value' => $this->options['flexslide_controlsContainer'],
      '#description' => t('Selector: Declare which container the navigation elements should be appended to. Default container is the FlexSlider element. Example use would be <code>.flexslider-container</code>. Property is ignored if given element is not found.'),
      '#fieldset' => 'special',
    );
    $form['flexslide_manualControls'] = array(
      '#type' => 'textfield',
      '#title' => t('manualControls'),
      '#default_value' => $this->options['flexslide_manualControls'],
      '#description' => t('Selector to declare custom control navigation. Examples would be <code>.flex-control-nav li</code> or <code>#tabs-nav li img</code>, etc. The number of elements in your controlNav should match the number of slides/tabs.'),
      '#fieldset' => 'special',
    );
    $form['flexslide_customDirectionNav'] = array(
      '#type' => 'textfield',
      '#title' => t('customDirectionNav'),
      '#default_value' => $this->options['flexslide_customDirectionNav'],
      '#description' => t('Selector of a custom prev / next button. Must be two elements. In order to make the events work they have to have the classes "prev" and "next" (plus namespace).'),
      '#fieldset' => 'special',
    );
    $form['flexslide_sync'] = array(
      '#type' => 'textfield',
      '#title' => t('sync'),
      '#default_value' => $this->options['flexslide_sync'],
      '#description' => t('Mirror the actions performed on this slider with another slider. Use with care. The slider being synced must be initialized first, see sortWeight.'),
      '#fieldset' => 'special',
    );
    $form['flex_slider_sortWeight'] = array(
      '#type' => 'textfield',
      '#title' => t('sortWeight'),
      '#default_value' => $this->options['flex_slider_sortWeight'],
      '#description' => t('Weight used to sort multiple sliders.'),
      '#fieldset' => 'special',
      '#states' => array(
        'visible' => array('input[name="style_options[flexslide_sync]"]' => array('filled' => TRUE)),
      )
    );
    $form['flexslide_asNavFor'] = array(
      '#type' => 'textfield',
      '#title' => t('asNavFor'),
      '#default_value' => $this->options['flexslide_asNavFor'],
      '#description' => t('Selector for turning the slider into a thumbnail navigation for another slider.'),
      '#fieldset' => 'special',
    );
  }
}
